Advanced CSS: CSS Grid

Theory Assignments

1. WhatisCSSGrid, and how is it different from Flexbox?
    CSS Grid is a layout system in CSS that allows you to design web layouts using both rows and columns at the same time. It is best suited for complex web page layouts.

    Difference between CSS Grid and Flexbox:

    Feature: Layout Type

        -CSS Grid: Two-dimensional (works with rows and columns)

        -Flexbox: One-dimensional (works in a single row or column direction)

    Feature: Best For

        -CSS Grid: Page-level layouts and grid-based designs

        -Flexbox: Small-scale layouts like navigation bars, form inputs, or item alignment in one direction

    Feature: Direction Control

        -CSS Grid: Allows control of both horizontal and vertical directions together

        -Flexbox: Allows control of layout in one direction at a time (either row or column)

    Feature: Structure

        CSS Grid: Uses grid lines, grid tracks, and grid cells

        Flexbox: Uses main axis and cross axis

    Feature: Parent-Child Behavior

        CSS Grid: Parent is a grid container; children are placed into grid cells

        Flexbox: Parent is a flex container; children are placed along the flex line


2. Describe the CSS Grid properties grid-template-columns and grid-template-rows.

These two properties define the structure of the grid:

    -grid-template-columns: Specifies the number and width of columns in the grid.

    -grid-template-rows: Specifies the number and height of rows in the grid.

Example:

    .container {
        display: grid;
        grid-template-columns: 200px 1fr 100px;
        grid-template-rows: 100px auto 50px;
    }

-grid-template-columns: 200px 1fr 100px; → Creates 3 columns: one fixed at 200px, one flexible (1fr), and one fixed at 100px.

-grid-template-rows: 100px auto 50px; → Creates 3 rows: one fixed at 100px, one adjusts to content, and one fixed at 50px.


3. Explain the purpose of grid-area and how it is used tocreate complex layouts.

    grid-area is a shorthand property that defines the placement of a grid item using line numbers or named areas. It helps position an item within the grid by specifying:

    grid-area: row-start / column-start / row-end / column-end;

    Example:

    .item {
        grid-area: 1 / 2 / 3 / 4;
    }

    -Starts at row line 1, column line 2

    -Ends at row line 3, column line 4

    -This spans 2 rows and 2 columns


    Using Named Grid Areas:

    You can name areas using grid-template-areas and place items with grid-area.

    .container {
        display: grid;
        grid-template-areas:
            "header header"
            "sidebar main"
            "footer footer";
        grid-template-columns: 1fr 3fr;
    }

    .header { 
        grid-area: header; 
    }
    .sidebar { 
        grid-area: sidebar; 
    }
    .main { 
        grid-area: main; 
    }
    .footer { 
        grid-area: footer; 
    }

    This makes the layout more readable and easier to manage, especially for complex structures.

    